num_chains <- 8 # number of chains = number of processor cores
num_iter <- 2000 # number of samples per chain
num_warmup <- 1000 # number of warm-up samples per chain
num_thin <- 1 # thinning: extract one out of x samples per chain
# informative priors (based on grand average)
priors <- c(
prior("normal(4, 2)", class = "b", coef = "Intercept"),
prior("normal(0, 3)", class = "b"),
prior("student_t(3, 0, 2)", class = "sd")
)
load(here(N1_path, "RQ1_all_N1.RData"))
glimpse(all_N1)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(bayestestR)
library(bayesplot)
library(viridis)
# set directories --------------------------------------------------------------------
# N1 data
N1_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results of model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# load and prepare data --------------------------------------------------------------------
# N1 data
load(here(N1_path, "RQ1_all_N1.RData"))
# results of model fit
N1_brms <- readRDS(here(model_path, "N1_brms_2022-03-22.rds"))
# posterior samples of the posterior predictive distribution
posterior_predict_N1_brms <-
N1_brms %>%
posterior_predict(ndraws = 2000)
N1_brms
all_N1
PPC_N1_brms <-
posterior_predict_N1_brms %>%
ppc_stat_grouped(
y = pull(all_N1, amplitude),
group = pull(all_N1, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
PPC_N1_brms
ESS_Rhat_PPC_N1_brms <-
describe_posterior(
N1_brms,
centrality = "mean",
dispersion = TRUE,
ci = .95,
ci_method = "hdi",
test = NULL,
diagnostic = c("Rhat", "ESS"),
effects = c("all")
)
ESS_Rhat_PPC_N1_brms
?describe_posterior
ESS_Rhat_PPC_N1_brms <-
describe_posterior(
N1_brms,
centrality = "mean",
dispersion = TRUE,
ci = .95,
ci_method = "hdi",
test = NULL,
diagnostic = c("Rhat", "ESS"),
effects = c("fixed") # for varying effects, type ""fixed"" (summary for all posterior distributions is too long to be visualized properly)
)
ESS_Rhat_PPC_N1_brms
gc()
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("bayestestR")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(bayestestR)
# set directories --------------------------------------------------------------------
# N1 data
N1_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results of model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# load and prepare data --------------------------------------------------------------------
# N1 data
load(here(N1_path, "RQ1_all_N1.RData"))
# results of model fit
N1_brms <- readRDS(here(model_path, "N1_brms_2022-03-22.rds"))
# posterior samples of the posterior predictive distribution
posterior_predict_N1_brms <-
N1_brms %>%
posterior_predict(ndraws = 2000)
# model diagnostics: trace plots of MCMC draws --------------------------------------------------------
MCMC_N1_brms <-
plot(N1_brms, ask = FALSE)
MCMC_N1_brms <-
plot(N1_brms, ask = FALSE) +
theme_custom
MCMC_N1_brms <-
plot(N1_brms, ask = FALSE) +
theme_custom
PPC_N1_brms <-
posterior_predict_N1_brms %>%
ppc_stat_grouped(
y = pull(all_N1, amplitude),
group = pull(all_N1, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(bayestestR)
library(bayesplot)
library(viridis)
# set directories --------------------------------------------------------------------
# N1 data
N1_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results of model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# N1 data
load(here(N1_path, "RQ1_all_N1.RData"))
# results of model fit
N1_brms <- readRDS(here(model_path, "N1_brms_2022-03-22.rds"))
# posterior samples of the posterior predictive distribution
posterior_predict_N1_brms <-
N1_brms %>%
posterior_predict(ndraws = 2000)
MCMC_N1_brms <-
plot(N1_brms, ask = FALSE) +
theme_custom
PPC_N1_brms <-
posterior_predict_N1_brms %>%
ppc_stat_grouped(
y = pull(all_N1, amplitude),
group = pull(all_N1, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
PPC_N1_brms
ESS_Rhat_PPC_N1_brms <-
describe_posterior(
N1_brms,
centrality = "mean",
dispersion = TRUE,
ci = .95,
ci_method = "hdi",
test = NULL,
diagnostic = c("Rhat", "ESS"),
effects = c("fixed") # for varying effects, type "fixed" (summary for "all" posterior distributions is too long to be visualized properly)
)
ESS_Rhat_PPC_N1_brms
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("emmeans")
# install.packages("bayestestR")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(emmeans)
library(bayestestR)
# set directories --------------------------------------------------------------------
# # N1 data
# N1_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results of model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# load data --------------------------------------------------------------------
# results of model fit
N1_brms <- readRDS(here(model_path, "N1_brms_2022-03-22.rds"))
N1_brms
ropeHDI <- c(-.05, .05)
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>% # estimated marginal means
pairs() %>% # posterior distributions of differences
equivalence_test(
range = ropeHDI, # ROPE
ci = .95 # HDI
)
equivalence_test_N1_brms
seq(from = -0.05, to = 0.5, by = 0.01)
seq(from = -0.5, to = -0.05, by = 0.01)
?seq
rev(seq(from = -0.5, to = -0.05, by = 0.01))
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = rev(seq(from = 0.5, to = 0.05, by = 0.01))
)
rev(seq(from = -0.5, to = -0.05, by = 0.01))
rev(seq(from = 0.05, to = 0.5, by = 0.01))
rev(seq(from = -0.5, to = -0.05, by = 0.01))
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
range_ropeHDI
View(range_ropeHDI)
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
nrow(range_ropeHDI)
range_ropeHDI
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(range_ropeHDI["low_ROPE", i], range_ropeHDI["high_ROPE", i]),
ci = .95
)
# yes, I know I shouldn't use loops in R
for (i in nrow(range_ropeHDI)) {
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(range_ropeHDI["low_ROPE", i], range_ropeHDI["high_ROPE", i]),
ci = .95
)
equivalence_test_N1_brms
}
i
range_ropeHDI["low_ROPE", i]
range_ropeHDI[i, "low_ROPE"]
# yes, I know I shouldn't use loops in R
for (i in nrow(range_ropeHDI)) {
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(range_ropeHDI[i, "low_ROPE"], range_ropeHDI[i, "high_ROPE"]),
ci = .95
)
equivalence_test_N1_brms
}
c(range_ropeHDI[i, "low_ROPE"], range_ropeHDI[i, "high_ROPE"])
c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"]))
# yes, I know I shouldn't use loops in R
for (i in nrow(range_ropeHDI)) {
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
equivalence_test_N1_brms
}
equivalence_test_N1_brms
i=1
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
class(equivalence_test_N1_brms)
glimpse(equivalence_test_N1_brms)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
# yes, I know I shouldn't use loops in R
for (i in nrow(range_ropeHDI)) {
equivalence_test_N1_brms <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
glimpse(equivalence_test_N1_brms)
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
# yes, I know I shouldn't use loops in R
for (i in nrow(range_ropeHDI)) {
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
equivalence_test_N1_brms <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
i in nrow(range_ropeHDI)
nrow(range_ropeHDI)
range_ropeHDI
# yes, I know I shouldn't use loops in R
for (i in 1:nrow(range_ropeHDI)) {
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
equivalence_test_N1_brms <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
View(all_equivalence_test_N1_brms)
range_ropeHDI
View(range_ropeHDI)
# range of plausible ROPE values
# (between ±0.05 and ±0.5 µV in steps of 0.01 µV)
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
# yes, I know I shouldn't use loops in R
for (i in 1:nrow(range_ropeHDI)) {
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = .95
)
equivalence_test_N1_brms <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
View(all_equivalence_test_N1_brms)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
# yes, I know I shouldn't use loops in R
for (i in 1:nrow(range_ropeHDI)) {
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])),
ci = 1
)
# extract values from results
equivalence_test_N1_brms <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
# merge results using all ROPEs
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
View(all_equivalence_test_N1_brms)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("emmeans")
# install.packages("bayestestR")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(emmeans)
library(bayestestR)
# set directories --------------------------------------------------------------------
# # N1 data
# N1_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results of model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# load data --------------------------------------------------------------------
# results of model fit
N1_brms <- readRDS(here(model_path, "N1_brms_2022-03-22.rds"))
# range of plausible ROPE values
# (between ±0.05 and ±0.5 µV in steps of 0.01 µV)
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
# preallocate data frame with all ROPE results
all_equivalence_test_N1_brms <- NULL
# yes, I know I shouldn't use loops in R
for (i in 1:nrow(range_ropeHDI)) {
res <-
N1_brms %>%
emmeans(~ condition_RQ1) %>% # estimated marginal means
pairs() %>% # posterior distributions of difference
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])), # ROPE
ci = 1 # percentage of the **whole posterior distribution** that falls within the ROPE (for details, see https://doi.org/10.3389/fpsyg.2019.02767)
)
# extract values from results
equivalence_test_N1_brms <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
# merge results using all ROPEs
all_equivalence_test_N1_brms <- rbind(all_equivalence_test_N1_brms, equivalence_test_N1_brms)
}
all_equivalence_test_N1_brms
View(all_equivalence_test_N1_brms)
