# yes, I know I shouldn't use loops in R
for (i in topo_times) {
# plot topography
topo <-
plot_all_data %>%
filter(time == i) %>% # keep only data in time window of interest
group_by(electrode) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across time
.groups = "keep") %>%
ungroup() %>%
topoplot(
# limits = c(-4, 4),
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "point", # use "name" to see electrode label
quantity = "amplitude",
scaling = 2 # scale labels and lines
) +
ggtitle(paste0(i, " ms")) +
theme(plot.title = element_text(size = 28, hjust = .5, face = "bold"))
print(topo)
}
# the ROI (region of interest) comprises the following electrodes:
# "AF3", "AFz", "AF4", "F1", "Fz", "F2", "FC1", "FC2", "FCz"
# plot time series (grand average, only ROI) --------------------------------------------------------------------
timeseries_grand_average_ROI <-
plot_all_data %>%
filter(electrode %in% ROI) %>% # keep only electrodes in ROI
group_by(ssj, electrode, time) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE),# average across conditions
.groups = "keep") %>%
ungroup() %>%
pivot_wider(
id_cols = c(ssj, time),
names_from = electrode,
values_from = amplitude
) %>%
mutate(ROI_amplitude = rowMeans(select(., all_of(ROI)), na.rm = TRUE)) %>%
summarySE( # average across participants
data = .,
measurevar = "ROI_amplitude",
groupvars = "time",
na.rm = FALSE,
conf.interval = .95
) %>%
as_tibble
timeseries_grand_average_ROI %>%
ggplot(
aes(
x = time,
y = ROI_amplitude
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_line( # one line per electrode
size = 1,
color = "#3B528BFF", # blue
alpha = .6
) +
geom_ribbon( # 95% CI
aes(
ymin = ROI_amplitude - ci,
ymax = ROI_amplitude + ci
),
# linetype = "dotted",
color = "#3B528BFF", # blue
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "grand average (ROI)", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 100)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-10, 2, 2), # y-axis: tick marks
limits = c(2, -10)
) +
annotate("rect",
xmin = time_window[1],
xmax = time_window[2],
ymin = -9,
ymax = -4,
linetype = "solid",
size = 1.5,
color = "#de1d1d",
alpha = 0
) +
theme_custom
# the time window of interest is between 300 - 500 ms
# topography in selected time window --------------------------------------------------------------------
plot_all_data %>%
filter(time >= time_window[1] & time <= time_window[2]) %>% # keep only data in time window of interest
group_by(electrode) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across time
.groups = "keep") %>%
ungroup() %>%
topoplot(
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "point", # use "name" to see electrode label
quantity = "amplitude",
highlights = c("AF3", "AFZ", "AF4", "F1", "FZ", "F2", "FC1", "FC2", "FCZ"),    # ROI,
scaling = 2 # scale labels and lines
) +
ggtitle(paste0(time_window[1], " - ", time_window[2], " ms")) +
theme(plot.title = element_text(size = 28, hjust = .5, face = "bold"))
# END --------------------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
# set directories --------------------------------------------------------------------
# data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ2")
# model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ2")
# create directory if it doesn't exist
if (dir.exists(model_path)) {
print(paste0("The directory '", model_path, "' already exists."))
} else {
dir.create(path = model_path)
print(paste0("Directory '", model_path, "' created."))
}
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("Rmisc")
# install.packages("here")
# install.packages("tidyverse")
# install.packages("viridis")
# install.packages("remotes")
# remotes::install_github("craddm/eegUtils")
# load packages --------------------------------------------------------------------
library(Rmisc) # must be loaded before tidyverse (beware some nasty function masking!)
library(here)
library(tidyverse)
library(viridis)
library(eegUtils)
# setup: channels --------------------------------------------------------------------
# list channels to exclude (non-scalp)
exclude_chans <-
c(
"VEOG", "HEOG", "IO1", "IO2", "Afp9", "Afp10", # ocular channels
"M1", "M2" # mastoid channels
)
# load electrode locations
chan_locs <-
import_chans(
here("data", "original_data", "channel_locations", "chanlocs_ced.txt"),
format = "spherical",
file_format = "ced"
) %>%
filter(!electrode %in% exclude_chans) # exclude non-scalp channels
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# time points for topographies
topo_times <- c(305, 312, 320, 328, 336, 344, 352, 359, 367, 375, 383, 391, 398,
406, 414, 422, 430, 438, 445, 453, 461, 469, 477, 484, 492, 500)
# the values below are obtained by visual inspection, but
# they are included at the beginning of the script for convenience
# time window for mean ERP_novelty
time_window <- c(300, 500)
# electrode ROI (region of interest)
ROI <- c("AF3", "AFz", "AF4", "F1", "Fz", "F2", "FC1", "FC2", "FCz")
# load and prepare data --------------------------------------------------------------------
# load .RData
load(here("data", "processed_data", "ERP", "RData", "RQ2", "RQ2_plot_all_data.RData"))
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("Rmisc")
# install.packages("here")
# install.packages("tidyverse")
# install.packages("viridis")
# install.packages("remotes")
# remotes::install_github("craddm/eegUtils")
# load packages --------------------------------------------------------------------
library(Rmisc) # must be loaded before tidyverse (beware some nasty function masking!)
library(here)
library(tidyverse)
library(viridis)
library(eegUtils)
# setup: channels --------------------------------------------------------------------
# list channels to exclude (non-scalp)
exclude_chans <-
c(
"VEOG", "HEOG", "IO1", "IO2", "Afp9", "Afp10", # ocular channels
"M1", "M2" # mastoid channels
)
# load electrode locations
chan_locs <-
import_chans(
here("data", "original_data", "channel_locations", "chanlocs_ced.txt"),
format = "spherical",
file_format = "ced"
) %>%
filter(!electrode %in% exclude_chans) # exclude non-scalp channels
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# time points for topographies
topo_times <- c(305, 312, 320, 328, 336, 344, 352, 359, 367, 375, 383, 391, 398,
406, 414, 422, 430, 438, 445, 453, 461, 469, 477, 484, 492, 500)
# the values below are obtained by visual inspection, but
# they are included at the beginning of the script for convenience
# time window for mean ERP_novelty
time_window <- c(300, 500)
# electrode ROI (region of interest)
ROI <- c("AF3", "AFz", "AF4", "F1", "Fz", "F2", "FC1", "FC2", "FCz")
# load and prepare data --------------------------------------------------------------------
# load .RData
load(here("data", "processed_data", "ERP", "RData", "RQ2", "RQ2_plot_all_data.RData"))
timeseries_grand_average_ROI <-
plot_all_data %>%
filter(electrode %in% ROI) %>% # keep only electrodes in ROI
group_by(ssj, electrode, time) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across conditions
.groups = "keep") %>%
ungroup() %>%
pivot_wider(
id_cols = c(ssj, time),
names_from = electrode,
values_from = amplitude
) %>%
mutate(ROI_amplitude = rowMeans(select(., all_of(ROI)), na.rm = TRUE)) %>%
summarySE( # average across participants
data = .,
measurevar = "ROI_amplitude",
groupvars = "time",
na.rm = FALSE,
conf.interval = .95
) %>%
as_tibble
timeseries_grand_average_ROI %>%
ggplot(
aes(
x = time,
y = ROI_amplitude
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_line( # one line per electrode
size = 1,
color = "#3B528BFF", # blue
alpha = .6
) +
geom_ribbon( # 95% CI
aes(
ymin = ROI_amplitude - ci,
ymax = ROI_amplitude + ci
),
# linetype = "dotted",
color = "#3B528BFF", # blue
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "grand average (ROI)", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 100)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-10, 2, 2), # y-axis: tick marks
limits = c(2, -10)
) +
annotate("rect",
xmin = time_window[1],
xmax = time_window[2],
ymin = -9,
ymax = -4,
linetype = "solid",
size = 1.5,
color = "#de1d1d",
alpha = 0
) +
theme_custom
plot_all_data %>%
filter(time >= time_window[1] & time <= time_window[2]) %>% # keep only data in time window of interest
group_by(electrode) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across time
.groups = "keep") %>%
ungroup() %>%
topoplot(
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "point", # use "name" to see electrode label
quantity = "amplitude",
highlights = c("AF3", "AFZ", "AF4", "F1", "FZ", "F2", "FC1", "FC2", "FCZ"), # must be specified because some electrodes have different upper- and lower-case letters than ROI
scaling = 2 # scale labels and lines
) +
ggtitle(paste0(time_window[1], " - ", time_window[2], " ms")) +
theme(plot.title = element_text(size = 28, hjust = .5, face = "bold"))
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
# set directories --------------------------------------------------------------------
# data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ2")
# model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ2")
# create directory if it doesn't exist
if (dir.exists(model_path)) {
print(paste0("The directory '", model_path, "' already exists."))
} else {
dir.create(path = model_path)
print(paste0("Directory '", model_path, "' created."))
}
# setup: STAN --------------------------------------------------------------------
num_chains <- 8 # number of chains = number of processor cores
num_iter <- 4000 # number of samples per chain
num_warmup <- 2000 # number of warm-up samples per chain
num_thin <- 1 # thinning: extract one out of x samples per chain
# priors  --------------------------------------------------------------------
# informative priors (based on grand average)
priors <- c(
prior("normal(-8, 2)", class = "b", coef = "Intercept"),
prior("normal(0, 3)", class = "b"),
prior("student_t(3, 0, 2)", class = "sd")
)
# load data  --------------------------------------------------------------------
load(here(N1_path, "RQ2_all_N1.RData"))
load(here(ERP_path, "RQ2_all_N1.RData"))
ERP_path
# time window for mean ERP_novelty
time_window <- c(300, 500)
# electrode ROI (region of interest)
ROI <- c("AF3", "AFz", "AF4", "F1", "Fz", "F2", "FC1", "FC2", "FCz")
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# set directories for .RData files --------------------------------------------------------------------
# ERPs, all conditions
data_path <- here("data", "processed_data", "ERP", "RData")
# ERPs, RQ2
data_path_RQ2 <- here("data", "processed_data", "ERP", "RData", "RQ2")
# create directory if it doesn't exist
if (dir.exists(data_path_RQ2)) {
print(paste0("The directory '", data_path_RQ2, "' already exists."))
} else {
dir.create(path = data_path_RQ2)
print(paste0("Directory '", data_path_RQ2, "' created."))
}
# setup: ERP_novelty --------------------------------------------------------------------
# time window for mean ERP_novelty
time_window <- c(300, 500)
# electrode ROI (region of interest)
ROI <- c("AF3", "AFz", "AF4", "F1", "Fz", "F2", "FC1", "FC2", "FCz")
stats_list_RData <-
list.files(
path = data_path,
pattern = ".RData"
)
stats_list_RData
# preallocate data frame with all N1 data
all_ERP <- NULL
stats_list_RData <-
list.files(
path = data_path,
pattern = ".RData"
)
# preallocate data frame with all N1 data
all_ERP_novelty <- NULL
i=stats_list_RData[1]
# load .RData
load(here(data_path, i))
# extract amplitude from selected ROI and time window
ERP_novelty <-
ERP %>%
select(ssj, epoch_num, time, condition_RQ2, all_of(ROI)) %>% # keep only columns of interest
filter(time >= time_window[1] & time <= time_window[2]) %>% # keep only data in selected time window
na.omit %>% # delete NAs
pivot_longer(
all_of(ROI),
names_to = "electrode",
values_to = "amplitude"
) %>%
group_by(ssj, epoch_num, condition_RQ2) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average activity in ROI and time window
.groups = "keep") %>%
ungroup()
# all N1 data
all_ERP_novelty <- rbind(all_ERP_novelty, ERP_novelty)
here(data_path_RQ2, "RQ2_all_ERP_novelty.RData")
stats_list_RData <-
list.files(
path = data_path,
pattern = ".RData"
)
# preallocate data frame with all N1 data
all_ERP_novelty <- NULL
# yes, I know I shouldn't use loops in R
for (i in stats_list_RData) {
# load .RData
load(here(data_path, i))
# extract amplitude from selected ROI and time window
ERP_novelty <-
ERP %>%
select(ssj, epoch_num, time, condition_RQ2, all_of(ROI)) %>% # keep only columns of interest
filter(time >= time_window[1] & time <= time_window[2]) %>% # keep only data in selected time window
na.omit %>% # delete NAs
pivot_longer(
all_of(ROI),
names_to = "electrode",
values_to = "amplitude"
) %>%
group_by(ssj, epoch_num, condition_RQ2) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average activity in ROI and time window
.groups = "keep") %>%
ungroup()
# all N1 data
all_ERP_novelty <- rbind(all_ERP_novelty, ERP_novelty)
}
# save as .RData (compressed)
save(
all_ERP_novelty,
file = here(data_path_RQ2, "RQ2_all_ERP_novelty.RData")
)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
# set directories --------------------------------------------------------------------
# data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ2")
# model fit
model_path <- here("data", "processed_data", "ERP", "models", "RQ2")
# create directory if it doesn't exist
if (dir.exists(model_path)) {
print(paste0("The directory '", model_path, "' already exists."))
} else {
dir.create(path = model_path)
print(paste0("Directory '", model_path, "' created."))
}
num_chains <- 8 # number of chains = number of processor cores
num_iter <- 4000 # number of samples per chain
num_warmup <- 2000 # number of warm-up samples per chain
num_thin <- 1 # thinning: extract one out of x samples per chain
# informative priors (based on grand average)
priors <- c(
prior("normal(-8, 2)", class = "b", coef = "Intercept"),
prior("normal(0, 3)", class = "b"),
prior("student_t(3, 0, 2)", class = "sd")
)
load(here(ERP_path, "RQ2_all_N1.RData"))
ERP_path
load(here(ERP_path, "RQ2_all_ERP_novelty.RData"))
all_ERP_novelty
