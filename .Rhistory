condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
na.omit # drop NAs
# all N1 data
all_N1 <- rbind(all_N1, N1)
}
View(all_N1)
# yes, I know I shouldn't use loops in R
for (i in list_RData) {
# load .RData
load(here("data", "processed_data", "ERP", "RData", i))
# extract N1 amplitude from selected ROI and time window
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
select(-c(N, sd, se, ci)) %>% # remove unnecessary columns
na.omit # drop NAs
# all N1 data
all_N1 <- rbind(all_N1, N1)
}
i
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
)
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
select(-c(N, sd, se, ci))
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
select(-c(N, sd, se, ci)) %>% # remove unnecessary columns
na.omit
# preallocate data frame with all N1 data
all_N1 <- NULL
# yes, I know I shouldn't use loops in R
for (i in list_RData) {
# load .RData
load(here("data", "processed_data", "ERP", "RData", i))
# extract N1 amplitude from selected ROI and time window
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
select(-c(N, sd, se, ci)) %>% # remove unnecessary columns
na.omit # drop NAs
# all N1 data
all_N1 <- rbind(all_N1, N1)
}
View(all_N1)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("Rmisc")
# install.packages("here")
# install.packages("tidyverse")
# install.packages("viridis")
# install.packages("remotes")
# remotes::install_github("craddm/eegUtils")
# load packages --------------------------------------------------------------------
library(Rmisc) # must be loaded before tidyverse (beware some nasty function masking!)
library(here)
library(tidyverse)
library(viridis)
library(eegUtils)
# setup --------------------------------------------------------------------
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# list channels to exclude (non-scalp)
exclude_chans <-
c(
"VEOG", "HEOG", "IO1", "IO2", "Afp9", "Afp10", # ocular channels
"M1", "M2" # mastoid channels
)
# load electrode locations
chan_locs <-
import_chans(
here("data", "original_data", "channel_locations", "chanlocs_ced.txt"),
format = "spherical",
file_format = "ced"
) %>%
filter(!electrode %in% exclude_chans) # exclude non-scalp channels
# load and prepare data --------------------------------------------------------------------
# load .RData
load(here("data", "processed_data", "ERP", "RData", "Q1", "all_pointsummary.RData"))
# grand average
grand_average <-
all_pointsummary %>%
summarySE(
data = .,
measurevar = "mean",
groupvars = c("time", "electrode"),
na.rm = FALSE,
conf.interval = .95
) %>%
as_tibble
# plot time series (grand average) --------------------------------------------------------------------
timeseries_grand_average <-
grand_average %>%
ggplot(
aes(
x = time,
y = mean,
group = electrode
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_line( # one line per electrode
size = 1,
color = "#3B528BFF", # blue
alpha = .6
) +
geom_ribbon( # 95% CI
aes(
ymin = mean - ci,
ymax = mean + ci
),
# linetype = "dotted",
color = "#3B528BFF", # blue
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "grand average", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 100)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-16, 16, 2), # y-axis: tick marks
limits = c(16, -16)
) +
annotate("rect",
xmin = 100,
xmax = 150,
ymin = -4,
ymax = 8,
linetype = "solid",
size = 2,
color = "#de1d1d",
alpha = 0
) +
theme_custom
timeseries_grand_average
# based on the grand average, we identify
# a time window for the N1 between 100 - 150 ms
# plot topography --------------------------------------------------------------------
# by plotting the topography, we will identify
# the electrodes from which we can prominently record the N1
topo_data <-
all_pointsummary %>%
filter(time >= 100 & time <= 150) %>% # keep only data in time window of interest
summarySE(
data = .,
measurevar = "mean",
groupvars = "electrode",
na.rm = FALSE,
conf.interval = .95
) %>%
as_tibble %>%
select(electrode, amplitude = mean)
# plot topography
topo <-
topo_data %>%
topoplot(
.,
limits = c(-5, 5),
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "point", # use "name" to see electrode label
quantity = "amplitude",
highlights = c('PO7', 'PO3', 'O1', 'PO4', 'PO8', 'O2', 'POz', 'Oz', 'Iz'),
scaling = 2 # scale labels and lines
) +
ggtitle("N1 (localizer)")
topo
# the ROI (region of interest) comprises the following electrodes:
ROI <- c('PO7', 'PO3', 'O1', 'PO4', 'PO8', 'O2', 'POz', 'Oz', 'Iz')
# END --------------------------------------------------------------------
# informative priors
priors <- c(
prior("normal(-4, 3)", class = "b", coef = "Intercept"),
prior("normal(0, 3)", class = "b"),
set_prior("student_t(3, 0, 2)", class = "sd")
)
# model
N1_brms <-
brm(
amplitude ~ 0 + Intercept + condition + (1 + condition | ssj) + (1 + epoch_num  | ssj),
data = all_N1,
family = gaussian(),
prior = priors,
inits = "random",
control = list(
adapt_delta = .99,
max_treedepth = 15
),
chains = num_chains,
iter = num_iter,
warmup = num_warmup,
thin = num_thin,
algorithm = "sampling",
cores = num_chains,
seed = seed_smorfia,
file = here("data", "processed_data", "ERP", "models", "N1_brms.rds")
)
# model
N1_brms <-
brm(
amplitude ~ 0 + Intercept + condition + (1 + condition | ssj) + (1 + epoch_num  | ssj),
data = all_N1,
family = gaussian(),
prior = priors,
inits = "random",
control = list(
adapt_delta = .99,
max_treedepth = 15
),
chains = num_chains,
iter = num_iter,
warmup = num_warmup,
thin = num_thin,
algorithm = "sampling",
cores = num_chains,
seed = project_seed,
file = here("data", "processed_data", "ERP", "models", "N1_brms.rds")
)
get_prior(brm(
amplitude ~ 1 + condition + (1 + condition | ssj) + (1 + epoch_num  | ssj),
data = all_N1,
family = gaussian())
)
# model
N1_brms <-
brm(
amplitude ~ 0 + Intercept + condition + (1 + condition | ssj) + (1 + condition  | epoch_num),
data = all_N1,
family = gaussian(),
prior = priors,
inits = "random",
control = list(
adapt_delta = .99,
max_treedepth = 15
),
chains = num_chains,
iter = num_iter,
warmup = num_warmup,
thin = num_thin,
algorithm = "sampling",
cores = num_chains,
seed = project_seed,
file = here("data", "processed_data", "ERP", "models", "N1_brms.rds")
)
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("Rmisc")
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# load packages --------------------------------------------------------------------
library(Rmisc) # must be loaded before tidyverse (beware some nasty function masking!)
library(here)
library(tidyverse)
library(brms)
# setup --------------------------------------------------------------------
# electrodes in ROI
ROI <- c('PO7', 'PO3', 'O1', 'PO4', 'PO8', 'O2', 'POz', 'Oz', 'Iz')
# setup STAN
num_chains <- 8 # number of chains = number of processor cores
num_iter <- 2000 # number of samples per chain
num_warmup <- 1000 # number of warm-up samples per chain
num_thin <- 1 # thinning: extract one out of x samples per chain
# priors  --------------------------------------------------------------------
# informative priors
priors <- c(
prior("normal(-4, 3)", class = "b", coef = "Intercept"),
prior("normal(0, 3)", class = "b"),
set_prior("student_t(3, 0, 2)", class = "sd")
)
# load and prepare data  --------------------------------------------------------------------
# list of .RData files in directory
list_RData <-
list.files(
path = here("data", "processed_data", "ERP", "RData"),
pattern = "_ERP.RData"
)
# preallocate data frame with all N1 data
all_N1 <- NULL
# yes, I know I shouldn't use loops in R
for (i in list_RData) {
# load .RData
load(here("data", "processed_data", "ERP", "RData", i))
# extract N1 amplitude from selected ROI and time window
N1 <-
ERP %>%
# create new column
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
)
) %>%
select(ssj, time, epoch_num, condition, all_of(ROI)) %>% # keep only columns of interest
filter(time >= 100 & time <= 150) %>% # keep only data in selected time window
pivot_longer(
!c(ssj, time, epoch_num, condition), # keep as columns
names_to = "electrode",
values_to = "amplitude"
) %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = c("epoch_num", "condition"),
idvar = "ssj",
na.rm = FALSE,
conf.interval = .95
) %>%
add_column(
ssj = sub("_.*", "", i), # add column with participant number
.before = "epoch_num"
) %>%
select(-c(N, sd, se, ci)) %>% # remove unnecessary columns
na.omit # drop NAs
# all N1 data
all_N1 <- rbind(all_N1, N1)
}
# model
N1_brms <-
brm(
amplitude ~ 0 + Intercept + condition + (1 + condition | ssj),
# amplitude ~ 0 + Intercept + condition + (1 + condition | ssj) + (1 + condition  | epoch_num),
data = all_N1,
family = gaussian(),
prior = priors,
inits = "random",
control = list(
adapt_delta = .99,
max_treedepth = 15
),
chains = num_chains,
iter = num_iter,
warmup = num_warmup,
thin = num_thin,
algorithm = "sampling",
cores = num_chains,
seed = project_seed,
file = here("data", "processed_data", "ERP", "models", "N1_brms.rds")
)
