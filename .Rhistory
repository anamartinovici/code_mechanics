# Q4
# 'remembered'
# NOTE: 'remembered' can be both 'new' and 'old' and include all behavior
trigs_Q4_remembered <-
trigs %>%
filter(subsequent_correct == "subsequent_remembered") %>%
pull(trigger)
# 'forgotten'
# NOTE: 'forgotten' can be both 'new' and 'old' and include all behavior
trigs_Q4_forgotten <-
trigs %>%
filter(subsequent_correct == "subsequent_forgotten") %>%
pull(trigger)
list_csv
# list of .csv files in directory
list_csv <-
list.files(
path = here("data", "processed_data", "ERP", "data_frames"),
pattern = ".csv"
)
list_csv
i=1
i="sub-001.csv"
ERP <-
# load data
read_csv(
here("data", "processed_data", "ERP", "data_frames", i),
show_col_types = FALSE,
progress = FALSE
) %>%
# delete unnecessary column
select(-c(
`...1`,
all_of(exclude_chans) # non-scalp channels
)) %>%
# rename columns
rename("epoch_num" = "epoch") %>%
rename("trigger" = "condition") %>%
# relocate columns
relocate(time, .after = "epoch_num") %>%
relocate(trigger, .after = "epoch_num") %>%
# add participant column
# (separate call from mutate() because the position must be different)
add_column(
ssj = as_factor(file_path_sans_ext(i)),
.before = "epoch_num"
) %>%
# add condition-specific columns
mutate(
manmade = if_else(trigger %in% trigs_Q1_manmade, 1, 0),
natural = if_else(trigger %in% trigs_Q1_natural, 1, 0),
new = if_else(trigger %in% trigs_Q2_new, 1, 0),
old = if_else(trigger %in% trigs_Q2_old, 1, 0),
old_hit = if_else(trigger %in% trigs_Q3_old_hit, 1, 0),
old_miss = if_else(trigger %in% trigs_Q3_old_miss, 1, 0),
remembered = if_else(trigger %in% trigs_Q4_remembered, 1, 0),
forgotten = if_else(trigger %in% trigs_Q4_forgotten, 1, 0),
.after = "trigger"
)
View(ERP)
styler:::style_selection()
# save as .RData (compressed)
save(
all_ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0("all_ERP", file_path_sans_ext(i), ".RData")
)
# save as .RData (compressed)
save(
ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0("ERP", file_path_sans_ext(i), ".RData")
)
# save as .RData (compressed)
save(
ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0(file_path_sans_ext(i), "_ERP.RData")
)
Q1_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
View(Q1_ERP)
# save as .RData (compressed)
save(
Q1_ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0(file_path_sans_ext(i), "_Q1_ERP.RData")
)
# save as .RData (compressed)
save(
Q1_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q1",
paste0(file_path_sans_ext(i), "_Q1_ERP.RData")
)
Q2_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # new/old conditions
manmade == 1 ~ "new",
natural == 1 ~ "old"
),
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
View(Q2_ERP)
# save as .RData (compressed)
save(
Q2_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q2",
paste0(file_path_sans_ext(i), "_Q2_ERP.RData")
)
View(ERP)
# subset data for Q4
Q4_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # remembered/forgotten conditions
remembered == 1 ~ "remembered",
forgotten == 1 ~ "forgotten"
),
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
View(Q4_ERP)
styler:::style_selection()
ERP <-
# load data
read_csv(
here("data", "processed_data", "ERP", "data_frames", i),
show_col_types = FALSE,
progress = FALSE
) %>%
# delete unnecessary column
select(-c(
`...1`,
all_of(exclude_chans) # non-scalp channels
)) %>%
# rename columns
rename("epoch_num" = "epoch") %>%
rename("trigger" = "condition") %>%
# relocate columns
relocate(time, .after = "epoch_num") %>%
relocate(trigger, .after = "epoch_num") %>%
# add participant column
# (separate call from mutate() because the position must be different)
add_column(
ssj = as_factor(file_path_sans_ext(i)),
.before = "epoch_num"
) %>%
# add condition-specific columns
mutate(
manmade = if_else(trigger %in% trigs_Q1_manmade, 1, 0),
natural = if_else(trigger %in% trigs_Q1_natural, 1, 0),
new = if_else(trigger %in% trigs_Q2_new, 1, 0),
old = if_else(trigger %in% trigs_Q2_old, 1, 0),
old_hit = if_else(trigger %in% trigs_Q3_old_hit, 1, 0),
old_miss = if_else(trigger %in% trigs_Q3_old_miss, 1, 0),
remembered = if_else(trigger %in% trigs_Q4_remembered, 1, 0),
forgotten = if_else(trigger %in% trigs_Q4_forgotten, 1, 0),
.after = "trigger"
)
# save as .RData (compressed)
save(
ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0(file_path_sans_ext(i), "_ERP.RData")
)
# subset data for Q1
Q1_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q1_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q1",
paste0(file_path_sans_ext(i), "_Q1_ERP.RData")
)
# subset data for Q2
Q2_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # new/old conditions
new == 1 ~ "new",
old == 1 ~ "old"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q2_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q2",
paste0(file_path_sans_ext(i), "_Q2_ERP.RData")
)
# subset data for Q3
Q3_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # old-hit/old-miss conditions
old_hit == 1 ~ "old_hit",
old_miss == 1 ~ "old_miss"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q3_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q3",
paste0(file_path_sans_ext(i), "_Q3_ERP.RData")
)
# subset data for Q4
Q4_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # remembered/forgotten conditions
remembered == 1 ~ "remembered",
forgotten == 1 ~ "forgotten"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q4_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q4",
paste0(file_path_sans_ext(i), "_Q4_ERP.RData")
)
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tools")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tools)
library(tidyverse)
# setup --------------------------------------------------------------------
# list channels to exclude (non-scalp)
exclude_chans <-
c(
"VEOG", "HEOG", "IO1", "IO2", "Afp9", "Afp10", # ocular channels
"M1", "M2" # mastoid channels
)
# load triggers
trigs <- read_csv(
here("data", "original_data", "events", "TriggerTable.csv"),
show_col_types = FALSE
)
# combine triggers according to research questions
# Q1
# 'manmade' condition
# NOTE: 'manmade' excludes NAs in behavior:
# although scene category is independent from response,
# NAs may reflect drops in attention and, consequently, incomplete stimulus perception
trigs_Q1_manmade <-
trigs %>%
filter(scene_category == "man-made" & behavior != "na") %>%
pull(trigger)
# 'natural' condition
# NOTE: 'natural' excludes NAs in behavior:
# although scene category is independent from response,
# NAs may reflect drops in attention and, consequently, incomplete stimulus perception
trigs_Q1_natural <-
trigs %>%
filter(scene_category == "natural" & behavior != "na") %>%
pull(trigger)
# Q2
# 'new' condition
# NOTE: 'new' excludes NAs in behavior (possible drops in attention)
trigs_Q2_new <-
trigs %>%
filter(old == "new" & behavior != "na") %>%
pull(trigger)
# 'old' condition
# NOTE: 'old' excludes NAs in behavior (possible drops in attention)
trigs_Q2_old <-
trigs %>%
filter(old == "old" & behavior != "na") %>%
pull(trigger)
# Q3
# 'old-hit'
# NOTE: 'old-hit' must only include
# old in presentation and hit in behavior but can include NAs in memory:
# the point is whether the image has been initially successfully categorized as old,
# regardless of whether it's recognized as such in subsequent presentations
trigs_Q3_old_hit <-
trigs %>%
filter(old == "old" & behavior == "hit") %>%
pull(trigger)
# 'old-miss'
# NOTE: 'old-miss' must only include
# old in presentation and misses in behavior but can include NAs in memory:
# the point is whether the image has been initially unsuccessfully categorized as old,
# regardless of whether it's recognized as such in subsequent presentations
trigs_Q3_old_miss <-
trigs %>%
filter(old == "old" & behavior == "miss/forgotten") %>%
pull(trigger)
# Q4
# 'remembered'
# NOTE: 'remembered' can be both 'new' and 'old' and include all behavior
trigs_Q4_remembered <-
trigs %>%
filter(subsequent_correct == "subsequent_remembered") %>%
pull(trigger)
# 'forgotten'
# NOTE: 'forgotten' can be both 'new' and 'old' and include all behavior
trigs_Q4_forgotten <-
trigs %>%
filter(subsequent_correct == "subsequent_forgotten") %>%
pull(trigger)
# load MNE output and save as .RData --------------------------------------------------------
# list of .csv files in directory
list_csv <-
list.files(
path = here("data", "processed_data", "ERP", "data_frames"),
pattern = ".csv"
)
# # preallocate variable with epochs of all participants
# all_ERP <- NULL
# yes, I know I shouldn't use loops in R
for (i in list_csv) {
ERP <-
# load data
read_csv(
here("data", "processed_data", "ERP", "data_frames", i),
show_col_types = FALSE,
progress = FALSE
) %>%
# delete unnecessary column
select(-c(
`...1`,
all_of(exclude_chans) # non-scalp channels
)) %>%
# rename columns
rename("epoch_num" = "epoch") %>%
rename("trigger" = "condition") %>%
# relocate columns
relocate(time, .after = "epoch_num") %>%
relocate(trigger, .after = "epoch_num") %>%
# add participant column
# (separate call from mutate() because the position must be different)
add_column(
ssj = as_factor(file_path_sans_ext(i)),
.before = "epoch_num"
) %>%
# add condition-specific columns
mutate(
manmade = if_else(trigger %in% trigs_Q1_manmade, 1, 0),
natural = if_else(trigger %in% trigs_Q1_natural, 1, 0),
new = if_else(trigger %in% trigs_Q2_new, 1, 0),
old = if_else(trigger %in% trigs_Q2_old, 1, 0),
old_hit = if_else(trigger %in% trigs_Q3_old_hit, 1, 0),
old_miss = if_else(trigger %in% trigs_Q3_old_miss, 1, 0),
remembered = if_else(trigger %in% trigs_Q4_remembered, 1, 0),
forgotten = if_else(trigger %in% trigs_Q4_forgotten, 1, 0),
.after = "trigger"
)
# save as .RData (compressed)
save(
ERP,
file = here(
"data", "processed_data", "ERP", "RData",
paste0(file_path_sans_ext(i), "_ERP.RData")
)
# subset data for Q1
Q1_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q1_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q1",
paste0(file_path_sans_ext(i), "_Q1_ERP.RData")
)
# subset data for Q2
Q2_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # new/old conditions
new == 1 ~ "new",
old == 1 ~ "old"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q2_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q2",
paste0(file_path_sans_ext(i), "_Q2_ERP.RData")
)
# subset data for Q3
Q3_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # old-hit/old-miss conditions
old_hit == 1 ~ "old_hit",
old_miss == 1 ~ "old_miss"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q3_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q3",
paste0(file_path_sans_ext(i), "_Q3_ERP.RData")
)
# subset data for Q4
Q4_ERP <-
ERP %>%
# create new columns
mutate(
condition = case_when( # remembered/forgotten conditions
remembered == 1 ~ "remembered",
forgotten == 1 ~ "forgotten"
),
.after = "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
# save as .RData (compressed)
save(
Q4_ERP,
file = here(
"data", "processed_data", "ERP", "RData", "Q4",
paste0(file_path_sans_ext(i), "_Q4_ERP.RData")
)
}
# END --------------------------------------------------------------------
