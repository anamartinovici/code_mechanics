color = "black",
size = 1.2,
alpha = .8
) +
geom_vline( # vertical reference lines
xintercept = seq(-200, 500, 50),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_hline( # horizontal reference lines
yintercept = seq(-1, 5, 1),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_line( # one line per electrode
size = 1.2,
color = "#494847",
alpha = .8
) +
geom_ribbon( # 95% CI
aes(
ymin = amplitude - ci,
ymax = amplitude + ci
),
linetype = "dotted",
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 50)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-3, 3, 1), # y-axis: tick marks
limits = c(3, -3)
) +
theme_classic(base_size = 20) +
theme(
plot.title = element_text(
size = 28,
hjust = .5,
face = "bold"
),
legend.position = "none"
)
# plot
ggplot(
N1_ROI_localizer_pointsummary,
aes(
x = time,
y = amplitude
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_vline( # vertical reference lines
xintercept = seq(-200, 500, 50),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_hline( # horizontal reference lines
yintercept = seq(-1, 5, 1),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_line( # one line per electrode
size = 1.2,
color = "#494847",
alpha = .8
) +
geom_ribbon( # 95% CI
aes(
ymin = amplitude - ci,
ymax = amplitude + ci
),
linetype = "dotted",
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 50)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-1, 5, 1), # y-axis: tick marks
limits = c(5, -1)
) +
theme_classic(base_size = 20) +
theme(
plot.title = element_text(
size = 28,
hjust = .5,
face = "bold"
),
legend.position = "none"
)
# plot
ggplot(
N1_ROI_localizer_pointsummary,
aes(
x = time,
y = amplitude
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "dashed",
color = "black",
size = 1.2,
alpha = .8
) +
geom_vline( # vertical reference lines
xintercept = seq(-200, 500, 50),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_hline( # horizontal reference lines
yintercept = seq(-1, 8, 1),
linetype = "dotted",
color = "#999999",
size = .8,
alpha = .5
) +
geom_line( # one line per electrode
size = 1.2,
color = "#494847",
alpha = .8
) +
geom_ribbon( # 95% CI
aes(
ymin = amplitude - ci,
ymax = amplitude + ci
),
linetype = "dotted",
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 50)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-1, 8, 1), # y-axis: tick marks
limits = c(8, -1)
) +
theme_classic(base_size = 20) +
theme(
plot.title = element_text(
size = 28,
hjust = .5,
face = "bold"
),
legend.position = "none"
)
butterfly <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1)
View(butterfly)
butterfly <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1) %>%
select(ssj, time, all
butterfly <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1) %>%
select(ssj, time, all_of(ROI))
butterfly <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1) %>%
select(ssj, time, all_of(ROI)) %>%
pivot_longer(
!c(ssj, time), # keep participant number and time
names_to = "electrode",
values_to = "amplitude"
)
butterfly <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1) %>%
select(ssj, time, all_of(ROI)) %>%
pivot_longer(
!c(ssj, time), # keep participant number and time
names_to = "electrode",
values_to = "amplitude"
)
# summarized data from each time point (& within-subject 95% CI)
butterfly_pointsummary <-
butterfly %>%
summarySEwithin(
data = .,
measurevar = "amplitude",
withinvars = "time",
idvar = "ssj"
) %>%
mutate(
time = as.numeric(levels(time))[time] # re-convert time points to numeric
)
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# setup --------------------------------------------------------------------
# region of interest
ROI <- c('PO7', 'PO3', 'O1',
'PO4', 'PO8', 'O2',
'POz', 'Oz', 'Iz')
# load .RData file with all ERPs
load(here("data", "processed_data", "ERP", "RData", "all_ERP.RData"))
View(all_ERP)
Q1 <-
all_ERP %>%
# condition differences are not needed for collapsed localizer
filter(`manmade` == 1 | `natural` == 1)
View(Q1)
Q1 <-
all_ERP %>%
# select conditions of interest
filter(`manmade` == 1 | `natural` == 1) %>%
# create new columns
mutate(
condition = case_when(# manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
.after = "trigger"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
)
# subset data for Q1
Q1 <-
all_ERP %>%
# select conditions of interest
filter(`manmade` == 1 | `natural` == 1) %>%
# create new columns
mutate(
condition = case_when(# manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
)
Q1 <-
all_ERP %>%
# select conditions of interest
filter(`manmade` == 1 | `natural` == 1)
Q1 <-
all_ERP %>%
# select columns of interest
select(ssj, time, all_of(ROI))
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# region of interest
ROI <- c('PO7', 'PO3', 'O1',
'PO4', 'PO8', 'O2',
'POz', 'Oz', 'Iz')
# load and manipulate data for statistical analysis --------------------------------------------------------------------
# load .RData file with all ERPs
load(here("data", "processed_data", "ERP", "RData", "all_ERP.RData"))
Q1 <-
all_ERP %>%
# select columns of interest
select(ssj, time, all_of(ROI))
Q1 <-
all_ERP %>%
# select columns of interest
select(ssj, time, all_of(ROI)) %>%
# filter rows according to conditions of interest
filter(`manmade` == 1 | `natural` == 1)
Q1 <-
all_ERP %>%
# select columns of interest
select(ssj, time, manmade, natural, all_of(ROI)) %>%
# filter rows according to conditions of interest
filter(manmade == 1 | natural == 1)
Q1 <-
all_ERP %>%
# select columns of interest
select(ssj, time, manmade, natural, all_of(ROI)) %>%
# filter rows according to conditions of interest
filter(manmade == 1 | natural == 1) %>%
# create new columns
mutate(
condition = case_when(# manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
)
rowMeans(select(all_ERP, all_of(ROI)))
length(rowMeans(select(all_ERP, all_of(ROI))))
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
)
glimpse(Q1)
# subset data for Q1
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition))
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
)
unique(Q1$condition)
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))) # row-wise mean of ROI
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# keep only necessary columns
select(ssj, time, condition, ROI)
# subset data for Q1
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))), # row-wise mean of ROI
.after= "epoch_num"
)
all_of(ROI)
rowMeans(select(all_ERP, all_of(ROI)))
gc()
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# setup --------------------------------------------------------------------
# region of interest
ROI <- c('PO7', 'PO3', 'O1',
'PO4', 'PO8', 'O2',
'POz', 'Oz', 'Iz')
# load and manipulate data for statistical analysis --------------------------------------------------------------------
# load .RData file with all ERPs
load(here("data", "processed_data", "ERP", "RData", "all_ERP.RData"))
# subset data for Q1
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))), # row-wise mean of ROI
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# keep only necessary columns
select(ssj, time, condition, ROI)
# save as .RData (compressed)
save(
Q1,
file = here("data", "processed_data", "ERP", "RData", "Q1.RData")
)
# END --------------------------------------------------------------------
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# setup --------------------------------------------------------------------
# region of interest
ROI <- c('PO7', 'PO3', 'O1',
'PO4', 'PO8', 'O2',
'POz', 'Oz', 'Iz')
# load and manipulate data for statistical analysis --------------------------------------------------------------------
# load .RData file with all ERPs
load(here("data", "processed_data", "ERP", "RData", "all_ERP.RData"))
# subset data for Q1
Q1 <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
ROI = rowMeans(select(all_ERP, all_of(ROI))), # row-wise mean of ROI
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# keep only necessary columns
select(ssj, time, condition, ROI)
# save as .RData (compressed)
save(
Q1,
file = here("data", "processed_data", "ERP", "RData", "Q1.RData")
)
# END --------------------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
# load .RData file with all ERPs
load(here("data", "processed_data", "ERP", "RData", "all_ERP.RData"))
# subset data for Q1
Q1_ERP <-
all_ERP %>%
# create new columns
mutate(
condition = case_when( # manmade/natural conditions
manmade == 1 ~ "manmade",
natural == 1 ~ "natural"
),
.after= "epoch_num"
) %>%
# filter rows according to conditions of interest
filter(!is.na(condition)) %>%
# delete unnecessary columns
select(-c(epoch_num, trigger, manmade, natural, new, old, old_hit, old_miss, remembered, forgotten))
View(Q1_ERP)
gc()
