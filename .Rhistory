# combine plots
halfeye_posteriors_m <-
halfeye_emm_m / halfeye_emm_diff_m +
plot_annotation(
tag_levels = "A",
title = "Posterior distributions",
theme = theme(plot.title = element_text(size = 26, hjust = .5))
)
halfeye_posteriors_m
# save as.png
ggsave(
filename = "posterior_distributions.png",
plot = halfeye_posteriors_m,
device = "png",
path = results_path,
scale = 8,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# save as.png
ggsave(
filename = "posterior_distributions.png",
plot = halfeye_posteriors_m,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(bayestestR)
library(bayesplot)
library(viridis)
# set directories --------------------------------------------------------------------
# ERP data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# model
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# create directory if it doesn't exist
if (dir.exists(results_path)) {
print(paste0("The directory '", results_path, "' already exists."))
} else {
dir.create(path = results_path)
print(paste0("Directory '", results_path, "' created."))
}
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(bayestestR)
library(bayesplot)
library(viridis)
# set directories --------------------------------------------------------------------
# ERP data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# model
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# create directory if it doesn't exist
if (dir.exists(results_path)) {
print(paste0("The directory '", results_path, "' already exists."))
} else {
dir.create(path = results_path)
print(paste0("Directory '", results_path, "' created."))
}
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# load and prepare data --------------------------------------------------------------------
# ERP data
load(here(ERP_path, "RQ1_stats_all_data.RData"))
# results of model fit
m <- readRDS(here(model_path, "RQ1.rds"))
# posterior samples of the posterior predictive distribution
posterior_predict_m <-
m %>%
posterior_predict(ndraws = 2000)
# model diagnostics: trace plots of MCMC draws --------------------------------------------------------
MCMC_m <-
plot(m, ask = FALSE) +
theme_custom
# model diagnostics: posterior predictive checks --------------------------------------------------------
PPC_m <-
posterior_predict_m %>%
ppc_stat_grouped(
y = pull(stats_all_data, amplitude),
group = pull(stats_all_data, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
PPC_m
# model diagnostics: ESS and Rhat --------------------------------------------------------
ESS_Rhat_PPC_m <-
describe_posterior(
m,
centrality = "mean",
dispersion = TRUE,
ci = .95,
ci_method = "hdi",
test = NULL,
diagnostic = c("Rhat", "ESS"),
effects = c("fixed") # for varying effects, type "random" (summary for "all" posterior distributions is too long to be visualized properly)
)
ESS_Rhat_PPC_m
# save as .rds
saveRDS(
ESS_Rhat_PPC_m,
file = here(results_path, "summary_posteriors.rds")
)
# END --------------------------------------------------------
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("emmeans")
# install.packages("bayestestR")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(emmeans)
library(bayestestR)
# set directories --------------------------------------------------------------------
# model
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# load data --------------------------------------------------------------------
# results of model fit
m <- readRDS(here(model_path, "RQ1.rds"))
# hypothesis testing via Region of Practical Equivalence (ROPE) --------------------------------------------------------
# If the HDI is completely outside the ROPE, the “null hypothesis” for this parameter is “rejected”.
# If the ROPE completely covers the HDI, i.e., all most credible values of a parameter are inside the region of practical equivalence, the null hypothesis is "accepted".
# Else, it’s unclear whether the null hypothesis should be accepted or rejected ("undecided").
# We use the full ROPE, i.e., 100% of the HDI (for details, see https://doi.org/10.3389/fpsyg.2019.02767).
# The null hypothesis is rejected or accepted if the percentage of the posterior within the ROPE
# is smaller than 2.5% or greater than 97.5%.
# Desirable results are low proportions inside the ROPE (the closer to zero the better).
# range of plausible ROPE values
# (between ±0.05 and ±0.5 µV in steps of 0.01 µV)
range_ropeHDI <- tibble(
low_ROPE = rev(seq(from = -0.5, to = -0.05, by = 0.01)),
high_ROPE = seq(from = 0.05, to = 0.5, by = 0.01)
)
# preallocate data frame with all ROPE results
all_equivalence_test <- NULL
# yes, I know I shouldn't use loops in R
for (i in 1:nrow(range_ropeHDI)) {
res <-
m %>%
emmeans(~ condition_RQ1) %>% # estimated marginal means
pairs() %>% # posterior distributions of difference
equivalence_test(
range = c(pull(range_ropeHDI[i, "low_ROPE"]), pull(range_ropeHDI[i, "high_ROPE"])), # ROPE
ci = 1 # proportion of the **whole posterior distribution** that falls within the ROPE
)
# extract values from results
equivalence_test <-
tibble(
Parameter = res$Parameter,
CI = res$CI,
ROPE_low = res$ROPE_low,
ROPE_high = res$ROPE_high,
ROPE_Percentage = res$ROPE_Percentage,
ROPE_Equivalence = res$ROPE_Equivalence,
HDI_low = res$HDI_low,
HDI_high = res$HDI_high
)
# merge results using all ROPEs
all_equivalence_test <- rbind(all_equivalence_test, equivalence_test)
}
all_equivalence_test
# save as .rds
saveRDS(
all_equivalence_test,
file = here(results_path, "equivalence_test.rds")
)
# Results: 95% of the posterior distribution
# of the ERP amplitude difference between conditions
# is outside of a region of practical equivalence up until ±0.08 µV.
# Interpretation: we reject the null hypothesis that the two conditions
# elicit similar ERP amplitudes within ±0.08 µV.
# END --------------------------------------------------------------------
# RNG --------------------------------------------------------
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("emmeans")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# install.packages("tidybayes")
# install.packages("patchwork")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(emmeans)
library(bayestestR)
library(bayesplot)
library(viridis)
library(tidybayes)
library(patchwork)
# set directories --------------------------------------------------------------------
# ERP data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# model
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# raincloud plot
source(here("scripts", "analysis", "functions", "geom_flat_violin.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# setup: results --------------------------------------------------------------------
# largest ROPE identified during hypothesis testing
range_ropeHDI <- c(-.08, .08)
# load and prepare data --------------------------------------------------------------------
# ERP data
load(here(ERP_path, "RQ1_stats_all_data.RData"))
# results of model fit
m <- readRDS(here(model_path, "RQ1.rds"))
# data for trace plots of MCMC draws (fixed effects only)
data_MCMC_m <-
m %>%
as.array() %>%
.[, , 1:2]
dimnames(data_MCMC_m)[[3]] <-
c("intercept",
"beta"
)
# posterior samples of the posterior predictive distribution
posterior_predict_m <-
m %>%
posterior_predict(ndraws = 2000)
# Raincloud plot: ERP amplitude, all trials --------------------------------------------------------
raincloud_ERP_trials <-
stats_all_data %>%
ggplot(
aes(
x = condition_RQ1,
y = amplitude,
fill = condition_RQ1
)
) +
geom_flat_violin(
position = position_nudge(x = 0.2, y = 0),
alpha = 0.6
) +
geom_point(
aes(
y = amplitude,
color = condition_RQ1
),
position = position_jitter(width = 0.1),
size = 1,
alpha = 0.02
) +
geom_boxplot(
width = 0.2,
outlier.shape = NA,
alpha = 0.6
) +
labs(
title = "N1",
x = "condition",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_y_continuous(limits = c(-35, 55)) +
scale_fill_manual(values = cividis(2)) +
scale_color_manual(values = rep("black", 2)) +
coord_flip() +
theme_custom
raincloud_ERP_trials
# save as.png
ggsave(
filename = "raincloud_ERP_trials.png",
plot = raincloud_ERP_trials,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# Raincloud plot: ERP amplitude, averaged across trials --------------------------------------------------------
raincloud_ERP_avg_trials <-
stats_all_data %>%
group_by(ssj, condition_RQ1) %>%
summarize(
amplitude = mean(amplitude, na.rm = TRUE),
.groups = "keep"
) %>%
ungroup() %>%
ggplot(
aes(
x = condition_RQ1,
y = amplitude,
fill = condition_RQ1
)
) +
geom_flat_violin(
position = position_nudge(x = 0.2, y = 0),
alpha = 0.6
) +
geom_point(
aes(
y = amplitude,
color = condition_RQ1
),
position = position_jitter(width = 0.1),
size = 2,
alpha = 0.8
) +
geom_boxplot(
width = 0.2,
outlier.shape = NA,
alpha = 0.6
) +
labs(
title = "N1",
x = "condition",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_y_continuous(limits = c(-10, 15)) +
scale_fill_manual(values = cividis(2)) +
scale_color_manual(values = rep("black", 2)) +
coord_flip() +
theme_custom
raincloud_ERP_avg_trials
# save as.png
ggsave(
filename = "raincloud_ERP_avg_trials.png",
plot = raincloud_ERP_avg_trials,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# Plots: model diagnostics, fixed effects only --------------------------------------------------------
# trace plots of MCMC draws
MCMC_m <-
data_MCMC_m %>%
mcmc_trace(
pars = character(),
facet_args = list(nrow = 3, strip.position = "left"),
np = nuts_params(m)
) +
ggtitle("Trace plots") +
theme_custom
# rank histograms
rank_m <-
data_MCMC_m %>%
mcmc_rank_overlay(
n_bins = 20,
ref_line = TRUE,
facet_args = list(nrow = 3, strip.position = "left"),
) +
ggtitle("Rank histograms") +
theme_custom
# posterior predictive checks
PPC_m <-
posterior_predict_m %>%
ppc_stat_grouped(
y = pull(stats_all_data, amplitude),
group = pull(stats_all_data, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
# combine plots
plots_diagnostics_m <-
(MCMC_m + rank_m) /
PPC_m
plots_diagnostics_m[[1]] <-
plots_diagnostics_m[[1]] + plot_layout(tag_level = "new")
plots_diagnostics_m <-
plots_diagnostics_m +
plot_annotation(
tag_levels = c("A", "1"),
title = "Model Diagnostics",
theme = theme(plot.title = element_text(size = 26, hjust = .5))
)
plots_diagnostics_m
# save as.png
ggsave(
filename = "model_diagnostics.png",
plot = plots_diagnostics_m,
device = "png",
path = results_path,
scale = 8,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# Half-eye plots: posterior distributions of estimated marginal means --------------------------------------------------------
# posterior distributions of estimated marginal means
halfeye_emm_m <-
m %>%
emmeans(~ condition_RQ1) %>%
gather_emmeans_draws(value = "amplitude") %>%
ggplot(
aes(
y = condition_RQ1,
x = amplitude,
fill = condition_RQ1
)
) +
stat_halfeye(
.width = .95,
slab_colour = "black",
slab_size = .5
) +
scale_fill_viridis_d(option = "cividis", alpha = .6) +
scale_x_continuous(breaks = seq(-6, -3, .5)) +
labs(
y = "",
x = ""
) +
theme_custom
# pairwise comparisons of posterior distributions of estimated marginal means
halfeye_emm_diff_m <-
m %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
gather_emmeans_draws(value = "amplitude") %>%
ggplot(
aes(
y = contrast,
x = amplitude,
fill = stat(abs(x) < range_ropeHDI[2])
)
) +
stat_halfeye(
.width = .95,
slab_colour = "black",
slab_size = .5
) +
geom_vline(xintercept = range_ropeHDI, linetype = "dashed") + # largest ROPE
scale_fill_viridis_d(option = "cividis", alpha = .6) +
scale_x_continuous(breaks = seq(-1, 2, .5)) +
labs(
y = "",
x = expression(paste("amplitude (", mu, "V)"))
) +
theme_custom
# combine plots
halfeye_posteriors_m <-
halfeye_emm_m / halfeye_emm_diff_m +
plot_annotation(
tag_levels = "A",
title = "Posterior distributions",
theme = theme(plot.title = element_text(size = 26, hjust = .5))
)
halfeye_posteriors_m
# save as.png
ggsave(
filename = "posterior_distributions.png",
plot = halfeye_posteriors_m,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# END --------------------------------------------------------
