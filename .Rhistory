set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("Rmisc")
# install.packages("here")
# install.packages("tidyverse")
# install.packages("viridis")
# install.packages("remotes")
# remotes::install_github("craddm/eegUtils")
# load packages --------------------------------------------------------------------
library(Rmisc) # must be loaded before tidyverse (beware some nasty function masking!)
library(here)
library(tidyverse)
library(viridis)
library(eegUtils)
# set directories --------------------------------------------------------------------
# ERP data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# create directory if it doesn't exist
if (dir.exists(results_path)) {
print(paste0("The directory '", results_path, "' already exists."))
} else {
dir.create(path = results_path)
print(paste0("Directory '", results_path, "' created."))
}
# setup: channels --------------------------------------------------------------------
# list channels to exclude (non-scalp)
exclude_chans <-
c(
"VEOG", "HEOG", "IO1", "IO2", "Afp9", "Afp10", # ocular channels
"M1", "M2" # mastoid channels
)
# load electrode locations
chan_locs <-
import_chans(
here("data", "original_data", "channel_locations", "chanlocs_ced.txt"),
format = "spherical",
file_format = "ced"
) %>%
filter(!electrode %in% exclude_chans) # exclude non-scalp channels
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# the values below are obtained by visual inspection, but
# they are included at the beginning of the script for convenience
# time window for mean ERP
time_window <- c(130, 180)
# electrode ROI (region of interest)
ROI <- c("PO7", "PO3", "O1", "PO4", "PO8", "O2")
# load data --------------------------------------------------------------------
# load .RData
load(here("data", "processed_data", "ERP", "RData", "RQ1", "RQ1_plot_all_data.RData"))
# time points for topographies
topo_times <-
plot_all_data %>%
select(time) %>%
filter(time >= 0 & time <= 200) %>%
distinct() %>% # extract unique values
pull(time) # convert as vector
# yes, I know I shouldn't use loops in R
for (i in topo_times) {
# plot topography
topo <-
plot_all_data %>%
filter(time == i) %>% # keep only data in time window of interest
group_by(electrode) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across time
.groups = "keep") %>%
ungroup() %>%
topoplot(
# limits = c(-4, 4),
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "name", # use "point" to see points
quantity = "amplitude",
scaling = 1.5 # scale labels and lines
) +
ggtitle(paste0(i, " ms")) +
theme(plot.title = element_text(size = 28, hjust = .5, face = "bold"))
print(topo)
}
timeseries_grand_average_ROI <-
plot_all_data %>%
filter(electrode %in% ROI) %>% # keep only electrodes in ROI
group_by(ssj, electrode, time) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE),# average across conditions
.groups = "keep") %>%
ungroup() %>%
pivot_wider(
id_cols = c(ssj, time),
names_from = electrode,
values_from = amplitude
) %>%
mutate(ROI_amplitude = rowMeans(select(., all_of(ROI)), na.rm = TRUE)) %>%
summarySE( # average across participants
data = .,
measurevar = "ROI_amplitude",
groupvars = "time",
na.rm = FALSE,
conf.interval = .95
) %>%
as_tibble
plot_timeseries_grand_average_ROI <-
timeseries_grand_average_ROI %>%
ggplot(
aes(
x = time,
y = ROI_amplitude
)
) +
geom_vline( # vertical reference line
xintercept = 0,
linetype = "solid",
color = "black",
size = .8,
alpha = .4
) +
geom_hline( # horizontal reference line
yintercept = 0,
linetype = "solid",
color = "black",
size = .8,
alpha = .4
) +
geom_line( # ROI amplitude
size = 1,
color = "#3B528BFF", # blue
alpha = .6
) +
geom_ribbon( # 95% CI
aes(
ymin = ROI_amplitude - ci,
ymax = ROI_amplitude + ci
),
linetype = "dotted",
color = "#3B528BFF", # blue
size = .1,
alpha = .1,
show.legend = FALSE
) +
labs(
title = "grand average (ROI)", # title & axes labels
x = "time (ms)",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_x_continuous(breaks = seq(-200, 500, 50)) + # x-axis: tick marks
scale_y_reverse(
breaks = seq(-2, 14, 2), # y-axis: tick marks
limits = c(14, -2)
) +
annotate("rect",
xmin = time_window[1],
xmax = time_window[2],
ymin = 1,
ymax = 8,
linetype = "solid",
size = 1.5,
color = "#de1d1d",
alpha = 0
) +
theme_custom
plot_timeseries_grand_average_ROI
# save as.png
ggsave(
filename = "timeseries_grand_average_ROI.png",
plot = plot_timeseries_grand_average_ROI,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
topo_grand_average_ROI <-
plot_all_data %>%
filter(time >= time_window[1] & time <= time_window[2]) %>% # keep only data in time window of interest
group_by(electrode) %>%
summarize(amplitude = mean(amplitude, na.rm = TRUE), # average across time
.groups = "keep") %>%
ungroup() %>%
topoplot(
limits = c(-4, 4),
chanLocs = chan_locs,
method = "Biharmonic",
palette = "viridis",
interp_limit = "skirt",
contour = TRUE,
chan_marker = "point", # use "name" to see electrode label
quantity = "amplitude",
highlights = ROI,
scaling = 2 # scale labels and lines
) +
ggtitle(paste0(time_window[1], " - ", time_window[2], " ms")) +
theme(plot.title = element_text(size = 28, hjust = .5, face = "bold"))
topo_grand_average_ROI
# save as.png
ggsave(
filename = "topo_grand_average_ROI.png",
plot = topo_grand_average_ROI,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600,
bg = "white"
)
project_seed <- 999 # RNG seed
set.seed(project_seed) # set seed
# install packages --------------------------------------------------------------------
# install.packages("here")
# install.packages("tidyverse")
# install.packages("brms")
# install.packages("emmeans")
# install.packages("bayestestR")
# install.packages("bayesplot")
# install.packages("viridis")
# install.packages("tidybayes")
# install.packages("patchwork")
# load packages --------------------------------------------------------------------
library(here)
library(tidyverse)
library(brms)
library(emmeans)
library(bayestestR)
library(bayesplot)
library(viridis)
library(tidybayes)
library(patchwork)
# set directories --------------------------------------------------------------------
# ERP data
ERP_path <- here("data", "processed_data", "ERP", "RData", "RQ1")
# model
model_path <- here("data", "processed_data", "ERP", "models", "RQ1")
# results
results_path <- here("results", "RQ1", "ERP")
# setup: plots --------------------------------------------------------------------
# custom ggplot theme
source(here("scripts", "analysis", "functions", "custom_ggplot_theme.R"))
# raincloud plot
source(here("scripts", "analysis", "functions", "geom_flat_violin.R"))
# cividis color palette for bayesplot
color_scheme_set("viridisE")
# setup: results --------------------------------------------------------------------
# largest ROPE identified during hypothesis testing
range_ropeHDI <- c(-.08, .08)
# load and prepare data --------------------------------------------------------------------
# ERP data
load(here(ERP_path, "RQ1_stats_all_data.RData"))
# results of model fit
m <- readRDS(here(model_path, "RQ1.rds"))
# data for trace plots of MCMC draws (fixed effects only)
data_MCMC_m <-
m %>%
as.array() %>%
.[, , 1:2]
dimnames(data_MCMC_m)[[3]] <-
c("intercept",
"beta"
)
# posterior samples of the posterior predictive distribution
posterior_predict_m <-
m %>%
posterior_predict(ndraws = 2000)
raincloud_ERP_trials <-
stats_all_data %>%
ggplot(
aes(
x = condition_RQ1,
y = amplitude,
fill = condition_RQ1
)
) +
geom_flat_violin(
position = position_nudge(x = 0.2, y = 0),
alpha = 0.6
) +
geom_point(
aes(
y = amplitude,
color = condition_RQ1
),
position = position_jitter(width = 0.1),
size = 1,
alpha = 0.02
) +
geom_boxplot(
width = 0.2,
outlier.shape = NA,
alpha = 0.6
) +
labs(
title = "N1",
x = "condition",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_y_continuous(limits = c(-35, 55)) +
scale_fill_manual(values = cividis(2)) +
scale_color_manual(values = rep("black", 2)) +
coord_flip() +
theme_custom
raincloud_ERP_trials
# save as.png
ggsave(
filename = "raincloud_ERP_trials.png",
plot = raincloud_ERP_trials,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
raincloud_ERP_avg_trials <-
stats_all_data %>%
group_by(ssj, condition_RQ1) %>%
summarize(
amplitude = mean(amplitude, na.rm = TRUE),
.groups = "keep"
) %>%
ungroup() %>%
ggplot(
aes(
x = condition_RQ1,
y = amplitude,
fill = condition_RQ1
)
) +
geom_flat_violin(
position = position_nudge(x = 0.2, y = 0),
alpha = 0.6
) +
geom_point(
aes(
y = amplitude,
color = condition_RQ1
),
position = position_jitter(width = 0.1),
size = 2,
alpha = 0.8
) +
geom_boxplot(
width = 0.2,
outlier.shape = NA,
alpha = 0.6
) +
labs(
title = "N1",
x = "condition",
y = expression(paste("amplitude (", mu, "V)"))
) +
scale_y_continuous(limits = c(-10, 15)) +
scale_fill_manual(values = cividis(2)) +
scale_color_manual(values = rep("black", 2)) +
coord_flip() +
theme_custom
raincloud_ERP_avg_trials
# save as.png
ggsave(
filename = "raincloud_ERP_avg_trials.png",
plot = raincloud_ERP_avg_trials,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
# trace plots of MCMC draws
MCMC_m <-
data_MCMC_m %>%
mcmc_trace(
pars = character(),
facet_args = list(nrow = 3, strip.position = "left"),
np = nuts_params(m)
) +
ggtitle("Trace plots") +
theme_custom
# rank histograms
rank_m <-
data_MCMC_m %>%
mcmc_rank_overlay(
n_bins = 20,
ref_line = TRUE,
facet_args = list(nrow = 3, strip.position = "left"),
) +
ggtitle("Rank histograms") +
theme_custom
# posterior predictive checks
PPC_m <-
posterior_predict_m %>%
ppc_stat_grouped(
y = pull(stats_all_data, amplitude),
group = pull(stats_all_data, condition_RQ1),
stat = "mean"
) +
ggtitle("Posterior predictive samples") +
theme_custom
# combine plots
plots_diagnostics_m <-
(MCMC_m + rank_m) /
PPC_m
plots_diagnostics_m[[1]] <-
plots_diagnostics_m[[1]] + plot_layout(tag_level = "new")
plots_diagnostics_m <-
plots_diagnostics_m +
plot_annotation(
tag_levels = c("A", "1"),
title = "Model Diagnostics",
theme = theme(plot.title = element_text(size = 26, hjust = .5))
)
plots_diagnostics_m
# save as.png
ggsave(
filename = "model_diagnostics.png",
plot = plots_diagnostics_m,
device = "png",
path = results_path,
scale = 8,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
gc()
# posterior distributions of estimated marginal means
halfeye_emm_m <-
m %>%
emmeans(~ condition_RQ1) %>%
gather_emmeans_draws(value = "amplitude") %>%
ggplot(
aes(
y = condition_RQ1,
x = amplitude,
fill = condition_RQ1
)
) +
stat_halfeye(
.width = .95,
slab_colour = "black",
slab_size = .5
) +
scale_fill_viridis_d(option = "cividis", alpha = .6) +
scale_x_continuous(breaks = seq(-6, -3, .5)) +
labs(
y = "",
x = ""
) +
theme_custom
# pairwise comparisons of posterior distributions of estimated marginal means
halfeye_emm_diff_m <-
m %>%
emmeans(~ condition_RQ1) %>%
pairs() %>%
gather_emmeans_draws(value = "amplitude") %>%
ggplot(
aes(
y = contrast,
x = amplitude,
fill = stat(abs(x) < range_ropeHDI[2])
)
) +
stat_halfeye(
.width = .95,
slab_colour = "black",
slab_size = .5
) +
geom_vline(xintercept = range_ropeHDI, linetype = "dashed") + # largest ROPE
annotate(
"label",
x = range_ropeHDI,
y = .8,
label = range_ropeHDI,
size = 5
) +
scale_fill_viridis_d(option = "cividis", alpha = .6) +
scale_x_continuous(breaks = seq(-1, 2, .5)) +
labs(
y = "",
x = expression(paste("amplitude (", mu, "V)"))
) +
theme_custom
halfeye_emm_diff_m
# combine plots
halfeye_posteriors_m <-
halfeye_emm_m / halfeye_emm_diff_m +
plot_annotation(
tag_levels = "A",
title = "Posterior distributions",
theme = theme(plot.title = element_text(size = 26, hjust = .5))
)
halfeye_posteriors_m
# save as.png
ggsave(
filename = "posterior_distributions.png",
plot = halfeye_posteriors_m,
device = "png",
path = results_path,
scale = 5,
width = 1024,
height = 768,
units = "px",
dpi = 600
)
